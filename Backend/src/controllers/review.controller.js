const mongoose = require("mongoose");
const Order = require("../models/order.model");
const ProductVariation = require("../models/product_variations.model");
const Review = require("../models/review.model");
require("../models/review.model");
// T·∫°o m·ªõi
exports.createReview = async (req, res) => {
  try {
    const { product, rating, comment } = req.body;

    if (!product || !rating) {
      return res
        .status(400)
        .json({ message: "Thi·∫øu th√¥ng tin ƒë√°nh gi√° (product, rating)." });
    }

    // 1. L·∫•y danh s√°ch t·∫•t c·∫£ variation thu·ªôc s·∫£n ph·∫©m
    const variations = await ProductVariation.find({
      productId: product,
    }).select("_id");
    const variationIds = variations.map((v) => v._id.toString());

    if (variationIds.length === 0) {
      return res
        .status(404)
        .json({ message: "S·∫£n ph·∫©m kh√¥ng c√≥ bi·∫øn th·ªÉ n√†o ƒë·ªÉ ƒë√°nh gi√°." });
    }

    // 2. Ki·ªÉm tra ƒë∆°n h√†ng ƒë√£ ho√†n th√†nh ch·ª©a variation c·ªßa s·∫£n ph·∫©m
    const orders = await Order.find({
      userId: req.user.userId,
      status: "completed",
    });

    const hasPurchased = orders.some((order) =>
      order.items.some((item) =>
        variationIds.includes(item.variationId.toString())
      )
    );

    if (!hasPurchased) {
      return res
        .status(403)
        .json({ message: "B·∫°n c·∫ßn mua s·∫£n ph·∫©m ƒë·ªÉ ƒë√°nh gi√°." });
    }

    // 3. Ki·ªÉm tra ƒë√£ t·ª´ng ƒë√°nh gi√° s·∫£n ph·∫©m ch∆∞a
    const alreadyReviewed = await Review.findOne({
      product,
      user: req.user.userId,
    });

    if (alreadyReviewed) {
      return res
        .status(400)
        .json({ message: "B·∫°n ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m n√†y r·ªìi." });
    }

    // 4. T·∫°o review m·ªõi
    const review = new Review({
      product,
      user: req.user.userId,
      rating,
      comment,
    });

    await review.save();

    res.status(201).json(review);
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o review:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};


// L·∫•y chi ti·∫øt
exports.getReviewById = async (req, res) => {
  try {
    const review = await Review.findById(req.params.id).populate(
      "user",
      "name"
    );
    if (!review) return res.status(404).json({ message: "Not found" });
    res.json(review);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// C·∫≠p nh·∫≠t
exports.updateReview = async (req, res) => {
  try {
    // T√¨m review theo ID
    const review = await Review.findById(req.params.id);
    if (!review)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y review" });

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn c·∫≠p nh·∫≠t kh√¥ng (ng∆∞·ªùi t·∫°o review ho·∫∑c admin)
    if (
      review.user.toString() !== req.user.userId &&
      req.user.role !== "admin"
    ) {
      return res
        .status(403)
        .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a review n√†y" });
    }

    // C·∫≠p nh·∫≠t review
    review.rating = req.body.rating || review.rating;
    review.comment = req.body.comment || review.comment;
    await review.save();

    // Tr·∫£ v·ªÅ review ƒë√£ c·∫≠p nh·∫≠t
    res.status(200).json(review);
  } catch (err) {
    res
      .status(500)
      .json({ message: "L·ªói c·∫≠p nh·∫≠t review", error: err.message });
  }
};

// X√≥a
exports.deleteReview = async (req, res) => {
  try {
    // T√¨m review theo ID
    const review = await Review.findById(req.params.id);
    if (!review)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y review" });

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn x√≥a kh√¥ng (ng∆∞·ªùi t·∫°o review ho·∫∑c admin)
    if (
      review.user.toString() !== req.user.userId &&
      req.user.role !== "admin"
    ) {
      return res
        .status(403)
        .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a review n√†y" });
    }

    // N·∫øu c√≥ quy·ªÅn, ti·∫øn h√†nh x√≥a review
    await review.deleteOne();

    // Tr·∫£ v·ªÅ th√¥ng b√°o xo√° th√†nh c√¥ng
    res.status(200).json({ message: "X√≥a ƒë√°nh gi√° th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi x√≥a review", error: err.message });
  }
};

// L·∫•y t·∫•t c·∫£ ƒë√°nh gi√° (c√≥ ph√¢n trang ho·∫∑c kh√¥ng)
exports.getAllReviews = async (req, res) => {
  try {
    const reviews = await Review.find()
      .populate("user", "name avatar") // ‚úÖ L·∫•y c·∫£ avatar
      .populate("product", "name"); // ‚úÖ L·∫•y t√™n s·∫£n ph·∫©m

    res.status(200).json(reviews);
  } catch (err) {
    res
      .status(500)
      .json({ message: "L·ªói l·∫•y danh s√°ch ƒë√°nh gi√°", error: err.message });
  }
};

// POST /api/reviews/:id/reply
exports.addReply = async (req, res) => {
  try {
    const review = await Review.findById(req.params.id);
    if (!review) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y review" });

    // Ch·ªâ admin m·ªõi ƒë∆∞·ª£c ph·∫£n h·ªìi
    if (req.user.role !== "admin")
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ph·∫£n h·ªìi" });

    review.replies.push({
      content: req.body.content,
      admin: req.user.userId,
    });

    await review.save();
    res.status(200).json({ message: "ƒê√£ th√™m ph·∫£n h·ªìi", replies: review.replies });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi th√™m ph·∫£n h·ªìi", error: err.message });
  }
};

exports.getReviewsByProduct = async (req, res) => {
  try {
    const reviews = await Review.find({
      product: req.params.productId,
      visible: true, // Ch·ªâ l·∫•y ƒë√°nh gi√° ƒëang hi·ªÉn th·ªã
    })
      .populate("user", "name")
      .sort({ createdAt: -1 });

    res.status(200).json(reviews);
  } catch (err) {
    res.status(500).json({
      message: "Kh√¥ng th·ªÉ l·∫•y ƒë√°nh gi√°",
      error: err.message,
    });
  }
};


// C·∫≠p nh·∫≠t hi·ªÉn th·ªã
exports.toggleVisibility = async (req, res) => {

  try {
    console.log("üîí REQ.USER:", req.user);
    console.log("üîÑ REQ.BODY:", req.body);
    const review = await Review.findByIdAndUpdate(
      req.params.id,
      { visible: req.body.visible },
      { new: true }
    );
    if (!review) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°" });

    res.status(200).json({ message: "C·∫≠p nh·∫≠t hi·ªÉn th·ªã th√†nh c√¥ng", review });
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t hi·ªÉn th·ªã", error: err.message });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i vi ph·∫°m
exports.toggleFlag = async (req, res) => {
  try {
    const review = await Review.findByIdAndUpdate(
      req.params.id,
      { flagged: req.body.flagged },
      { new: true }
    );
    if (!review) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°" });

    res.status(200).json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i vi ph·∫°m th√†nh c√¥ng", review });
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i", error: err.message });
  }
};





